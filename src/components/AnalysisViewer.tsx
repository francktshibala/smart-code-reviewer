import React from 'react';
import { createPortal } from 'react-dom';
import { X, FileText, BarChart3, AlertCircle, Download } from 'lucide-react';
import type { Analysis } from '../hooks/useAnalyses';

interface AnalysisViewerProps {
  analysis: Analysis | null;
  isOpen: boolean;
  onClose: () => void;
}

export function AnalysisViewer({ analysis, isOpen, onClose }: AnalysisViewerProps) {
  console.log('AnalysisViewer render - isOpen:', isOpen, 'hasAnalysis:', !!analysis, 'analysisId:', analysis?.id);
  
  if (!isOpen || !analysis) {
    console.log('AnalysisViewer returning null - isOpen:', isOpen, 'hasAnalysis:', !!analysis);
    return null;
  }
  
  console.log('AnalysisViewer should render modal for analysis:', analysis.id);
  console.log('Creating portal to document.body');

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-emerald-600';
    if (score >= 60) return 'text-amber-600';
    return 'text-red-600';
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'text-red-700 bg-gradient-to-r from-red-100 to-red-200 border border-red-300';
      case 'medium': return 'text-amber-700 bg-gradient-to-r from-amber-100 to-amber-200 border border-amber-300';
      case 'low': return 'text-emerald-700 bg-gradient-to-r from-emerald-100 to-emerald-200 border border-emerald-300';
      default: return 'text-slate-700 bg-gradient-to-r from-slate-100 to-slate-200 border border-slate-300';
    }
  };

  const downloadReport = () => {
    const report = `# Code Analysis Report

## File Information
- **File Name:** ${analysis.filename}
- **Project:** ${analysis.project.name}
- **Language:** ${analysis.language}
- **Analysis Date:** ${new Date(analysis.createdAt).toLocaleDateString()}
- **Overall Score:** ${analysis.score}/100

## Metrics
- **Lines of Code:** ${analysis.analysisData.metrics.linesOfCode}
- **Cyclomatic Complexity:** ${analysis.analysisData.metrics.complexity}
- **Maintainability Index:** ${analysis.analysisData.metrics.maintainabilityIndex}
- **Function Count:** ${analysis.analysisData.metrics.functions}
- **Duplicate Lines:** ${analysis.analysisData.metrics.duplicateLines}

## Suggestions
${analysis.analysisData.suggestions.map(s => `- **${s.type.toUpperCase()}** (${s.severity}): ${s.message}${s.example ? `\n  *Example: ${s.example}*` : ''}`).join('\n')}

## Issues
${analysis.analysisData.issues.map(i => `- **${i.type.toUpperCase()}** (${i.severity}): ${i.message}${i.lineNumber ? ` (Line ${i.lineNumber})` : ''}`).join('\n')}

---
*Generated by Smart Code Reviewer*`;

    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis-${analysis.filename}-${analysis.id}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const modalContent = (
    <div 
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        zIndex: 99999,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '20px'
      }}
      onClick={onClose}
    >
      <div 
        style={{
          backgroundColor: 'white',
          borderRadius: '12px',
          maxWidth: '800px',
          width: '100%',
          maxHeight: '90vh',
          overflow: 'auto',
          padding: '20px'
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <div style={{ marginBottom: '20px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <h2 style={{ fontSize: '24px', fontWeight: 'bold' }}>{analysis.filename}</h2>
          <button 
            onClick={onClose}
            style={{ 
              background: 'none', 
              border: 'none', 
              fontSize: '24px', 
              cursor: 'pointer',
              padding: '5px 10px'
            }}
          >
            Ã—
          </button>
        </div>
        
        <div style={{ marginBottom: '20px' }}>
          <p><strong>Project:</strong> {analysis.project.name}</p>
          <p><strong>Language:</strong> {analysis.language}</p>
          <p><strong>Score:</strong> {analysis.score}/100</p>
          <p><strong>Created:</strong> {new Date(analysis.createdAt).toLocaleDateString()}</p>
        </div>

        <div>
          <h3 style={{ fontSize: '18px', marginBottom: '10px' }}>Metrics</h3>
          <p>Lines of Code: {analysis.analysisData.metrics.linesOfCode}</p>
          <p>Complexity: {analysis.analysisData.metrics.complexity}</p>
          <p>Maintainability: {analysis.analysisData.metrics.maintainabilityIndex}</p>
          <p>Functions: {analysis.analysisData.metrics.functions}</p>
        </div>

        {analysis.analysisData.suggestions.length > 0 && (
          <div style={{ marginTop: '20px' }}>
            <h3 style={{ fontSize: '18px', marginBottom: '10px' }}>Suggestions ({analysis.analysisData.suggestions.length})</h3>
            {analysis.analysisData.suggestions.map((suggestion, index) => (
              <div key={index} style={{ marginBottom: '10px', padding: '10px', border: '1px solid #ddd', borderRadius: '6px' }}>
                <span style={{ 
                  backgroundColor: suggestion.severity === 'high' ? '#fee' : suggestion.severity === 'medium' ? '#fef3cd' : '#d4edda',
                  padding: '2px 8px',
                  borderRadius: '4px',
                  fontSize: '12px',
                  marginRight: '10px'
                }}>
                  {suggestion.severity}
                </span>
                <strong>{suggestion.type}</strong>: {suggestion.message}
              </div>
            ))}
          </div>
        )}

        {analysis.analysisData.issues.length > 0 && (
          <div style={{ marginTop: '20px' }}>
            <h3 style={{ fontSize: '18px', marginBottom: '10px' }}>Issues ({analysis.analysisData.issues.length})</h3>
            {analysis.analysisData.issues.map((issue, index) => (
              <div key={index} style={{ marginBottom: '10px', padding: '10px', border: '1px solid #fcc', borderRadius: '6px', backgroundColor: '#fef' }}>
                <span style={{ 
                  backgroundColor: '#fee',
                  padding: '2px 8px',
                  borderRadius: '4px',
                  fontSize: '12px',
                  marginRight: '10px'
                }}>
                  {issue.severity}
                </span>
                <strong>{issue.type}</strong>: {issue.message}
                {issue.lineNumber && <span> (Line {issue.lineNumber})</span>}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  // Render modal using Portal to document body
  return createPortal(modalContent, document.body);
}