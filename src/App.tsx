import React, { useState, useCallback } from 'react';
import { Upload, FileText, AlertCircle, Download, BarChart3, Code, Clock } from 'lucide-react';
import type { CodeFile, AnalysisResult } from './services/types';
import { CodeAnalysisService } from './services/CodeAnalysisService';
import { createCodeFile, validateFile } from './utils/fileHandlers';
import { getLanguageIcon } from './utils/languageDetection';

function App() {
  const [isDragging, setIsDragging] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [file, setFile] = useState<CodeFile | null>(null);
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);

  const analysisService = CodeAnalysisService.getInstance();

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  }, []);

  const handleDrop = useCallback(async (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      await processFile(files[0]);
    }
  }, []);

  const handleFileSelect = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      await processFile(files[0]);
    }
  }, []);

  const processFile = async (selectedFile: File) => {
    try {
      setError(null);
      setResult(null);
      setProgress(0);
      
      // Validate file
      validateFile(selectedFile);
      
      // Create code file
      const codeFile = await createCodeFile(selectedFile);
      setFile(codeFile);
      
      // Start analysis
      setIsAnalyzing(true);
      
      // Simulate progress
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 200);
      
      // Analyze code
      const analysisResult = await analysisService.analyzeCode(codeFile);
      
      clearInterval(progressInterval);
      setProgress(100);
      
      setTimeout(() => {
        setResult(analysisResult);
        setIsAnalyzing(false);
        setProgress(0);
      }, 500);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
      setIsAnalyzing(false);
      setProgress(0);
    }
  };

  const downloadReport = () => {
    if (!result) return;
    
    const report = generateMarkdownReport(result);
    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `code-analysis-${result.fileName}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generateMarkdownReport = (result: AnalysisResult): string => {
    return `# Code Analysis Report

## File Information
- **File Name:** ${result.fileName}
- **Analysis Date:** ${result.createdAt.toLocaleDateString()}
- **Overall Score:** ${result.score}/100

## Metrics
- **Lines of Code:** ${result.metrics.linesOfCode}
- **Cyclomatic Complexity:** ${result.metrics.complexity}
- **Maintainability Index:** ${result.metrics.maintainabilityIndex}
- **Function Count:** ${result.metrics.functions}
- **Duplicate Lines:** ${result.metrics.duplicateLines}

## Suggestions
${result.suggestions.map(s => `- **${s.type.toUpperCase()}** (${s.severity}): ${s.message}${s.example ? `\n  *Example: ${s.example}*` : ''}`).join('\n')}

## Issues
${result.issues.map(i => `- **${i.type.toUpperCase()}** (${i.severity}): ${i.message}${i.lineNumber ? ` (Line ${i.lineNumber})` : ''}`).join('\n')}

---
*Generated by Smart Code Reviewer*`;
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'text-red-600 bg-red-50';
      case 'medium': return 'text-yellow-600 bg-yellow-50';
      case 'low': return 'text-green-600 bg-green-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center space-x-3">
            <Code className="w-8 h-8 text-blue-600" />
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Smart Code Reviewer</h1>
              <p className="text-gray-600">AI-powered code analysis and suggestions</p>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* File Upload Zone */}
        <div className="mb-8">
          <div
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
              isDragging
                ? 'border-blue-400 bg-blue-50'
                : 'border-gray-300 hover:border-gray-400'
            }`}
          >
            <Upload className="w-12 h-12 mx-auto text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              Upload your code file
            </h3>
            <p className="text-gray-600 mb-4">
              Drag and drop a file here, or click to browse
            </p>
            <input
              type="file"
              accept=".ts,.js,.py,.java,.go,.rs"
              onChange={handleFileSelect}
              className="hidden"
              id="file-upload"
            />
            <label
              htmlFor="file-upload"
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 cursor-pointer"
            >
              Choose File
            </label>
            <p className="text-xs text-gray-500 mt-2">
              Supported: TypeScript, JavaScript, Python, Java, Go, Rust (max 1MB)
            </p>
          </div>
        </div>

        {/* Error Message */}
        {error && (
          <div className="mb-6 p-4 border border-red-200 rounded-md bg-red-50">
            <div className="flex items-center">
              <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
              <span className="text-red-700">{error}</span>
            </div>
          </div>
        )}

        {/* Loading State */}
        {isAnalyzing && (
          <div className="mb-6 p-6 border border-blue-200 rounded-md bg-blue-50">
            <div className="flex items-center mb-4">
              <Clock className="w-5 h-5 text-blue-500 mr-2" />
              <span className="text-blue-700 font-medium">Analyzing code...</span>
            </div>
            <div className="w-full bg-blue-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              />
            </div>
            <p className="text-sm text-blue-600 mt-2">{progress}% complete</p>
          </div>
        )}

        {/* Results */}
        {result && (
          <div className="space-y-6">
            {/* Score Card */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <FileText className="w-6 h-6 text-gray-600" />
                  <div>
                    <h2 className="text-lg font-semibold text-gray-900">
                      {result.fileName}
                    </h2>
                    <p className="text-sm text-gray-600">
                      {getLanguageIcon(file?.language || 'javascript')} {file?.language}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <div className={`text-3xl font-bold ${getScoreColor(result.score)}`}>
                    {result.score}/100
                  </div>
                  <div className="text-sm text-gray-600">Quality Score</div>
                </div>
              </div>

              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-gray-900">{result.metrics.linesOfCode}</div>
                  <div className="text-sm text-gray-600">Lines of Code</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-gray-900">{result.metrics.complexity}</div>
                  <div className="text-sm text-gray-600">Complexity</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-gray-900">{result.metrics.maintainabilityIndex}</div>
                  <div className="text-sm text-gray-600">Maintainability</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-gray-900">{result.metrics.functions}</div>
                  <div className="text-sm text-gray-600">Functions</div>
                </div>
              </div>
            </div>

            {/* Suggestions */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <BarChart3 className="w-5 h-5 mr-2" />
                Suggestions ({result.suggestions.length})
              </h3>
              <div className="space-y-3">
                {result.suggestions.map((suggestion, index) => (
                  <div key={index} className="border rounded-md p-4">
                    <div className="flex items-start space-x-3">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(suggestion.severity)}`}>
                        {suggestion.severity}
                      </span>
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-1">
                          <span className="text-sm font-medium text-gray-900 uppercase">
                            {suggestion.type}
                          </span>
                          {suggestion.lineNumber && (
                            <span className="text-xs text-gray-500">
                              Line {suggestion.lineNumber}
                            </span>
                          )}
                        </div>
                        <p className="text-gray-700 mb-2">{suggestion.message}</p>
                        {suggestion.example && (
                          <div className="bg-gray-50 rounded p-2 text-sm text-gray-600">
                            <strong>Example:</strong> {suggestion.example}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Issues */}
            {result.issues.length > 0 && (
              <div className="bg-white rounded-lg shadow-sm border p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <AlertCircle className="w-5 h-5 mr-2" />
                  Issues ({result.issues.length})
                </h3>
                <div className="space-y-3">
                  {result.issues.map((issue, index) => (
                    <div key={index} className="border rounded-md p-4">
                      <div className="flex items-start space-x-3">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(issue.severity)}`}>
                          {issue.severity}
                        </span>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-1">
                            <span className="text-sm font-medium text-gray-900 uppercase">
                              {issue.type}
                            </span>
                            {issue.lineNumber && (
                              <span className="text-xs text-gray-500">
                                Line {issue.lineNumber}
                              </span>
                            )}
                          </div>
                          <p className="text-gray-700">{issue.message}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Export Report */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Export Report</h3>
              <p className="text-gray-600 mb-4">
                Download a comprehensive analysis report in Markdown format.
              </p>
              <button
                onClick={downloadReport}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
              >
                <Download className="w-4 h-4 mr-2" />
                Download Report
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;